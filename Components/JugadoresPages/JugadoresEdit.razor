@page "/Jugadores/Edit/{JugadorId:int}"
@using RegistroJugadores.Models
@using RegistroJugadores.Services

@rendermode InteractiveServer
@inject JugadoresService jugadoresService
@inject NavigationManager navigationManager

<PageTitle>Modificar Jugador</PageTitle>

@if (Jugador == null)
{
    <p><em>Cargando datos del jugador...</em></p>
}
else
{
    <div class="container mt-4">
        <div class="card shadow-lg">
            <div class="card-header text-center bg-primary text-white border-bottom-0">
                <h5 class="card-title">Modificar Jugador</h5>
            </div>

            <EditForm Model="Jugador" OnValidSubmit="Modificar" FormName="formEditarJugador">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label"><strong>Nombres</strong></label>
                        <InputText class="form-control" @bind-Value="Jugador.Nombres" />
                        <ValidationMessage For="() => Jugador.Nombres" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label"><strong>Partidas</strong></label>
                        <InputNumber class="form-control" @bind-Value="Jugador.Partidas" />
                        <ValidationMessage For="() => Jugador.Partidas" />
                    </div>
                </div>

                <div class="card-footer d-flex justify-content-center mt-2">
                    <div class="btn-group" role="group">
                        <a href="/Jugadores/Index" class="btn btn-outline-secondary">
                            <i class="bi bi-box-arrow-left"></i> Volver
                        </a>
                        <button type="submit" class="btn btn-outline-success">
                            <i class="bi bi-pencil"></i> Modificar
                        </button>
                        <button type="button" class="btn btn-danger" @onclick="() => MostrarModalEliminar = true">
                            <i class="bi bi-trash"></i> Eliminar
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>

    @if (MostrarModalEliminar)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content shadow">
                    <div class="modal-header bg-danger text-white text-center">
                        <h5 class="modal-title">Eliminar Jugador</h5>
                        <button type="button" class="btn-close" @onclick="CerrarModalEliminar"></button>
                    </div>

                    <div class="modal-body text-danger">
                        <p>¿Estás seguro que deseas eliminar este jugador?</p>
                    </div>

                    <div class="card-header">
                        <h5 class="card-title text-center"><strong>Datos del Jugador</strong></h5>
                    </div>
                    <div class="mb-3 ms-3">
                        <p><strong>Jugador Id:</strong> @Jugador.JugadorId</p>
                        <p><strong>Nombres:</strong> @Jugador.Nombres</p>
                        <p><strong>Partidas:</strong> @Jugador.Partidas</p>
                    </div>

                    <div class="modal-footer d-flex justify-content-center">
                        <div class="btn-group" role="group">
                            <button class="btn btn-outline-secondary" @onclick="CerrarModalEliminar">
                                <i class="bi bi-box-arrow-left"></i> Volver
                            </button>
                            <button class="btn btn-outline-danger" @onclick="EliminarJugador">
                                <i class="bi bi-trash"></i> Eliminar
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}

<div class="text-center mt-2 text-danger">@Mensaje</div>

@code {
    [Parameter]
    public int JugadorId { get; set; }

    public Jugadores? Jugador { get; set; }
    public string Mensaje { get; set; } = string.Empty;
    private bool MostrarModalEliminar { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Jugador = await jugadoresService.Buscar(JugadorId);
        if (Jugador == null)
        {
            Mensaje = $"Jugador con ID {JugadorId} no encontrado.";
            navigationManager.NavigateTo("/Jugadores/Index");
        }
    }

    private async Task Modificar()
    {
        if (Jugador != null)
        {
            var modificado = await jugadoresService.Guardar(Jugador);
            if (modificado)
            {
                navigationManager.NavigateTo("/Jugadores/Index");
            }
            else
            {
                Mensaje = "No se pudo modificar el jugador.";
            }
        }
    }

    private void CerrarModalEliminar()
    {
        MostrarModalEliminar = false;
    }

    private async Task EliminarJugador()
    {
        if (Jugador != null)
        {
            var eliminado = await jugadoresService.Eliminar(Jugador.JugadorId);
            if (eliminado)
            {
                navigationManager.NavigateTo("/Jugadores/Index");
            }
            else
            {
                Mensaje = "No se pudo eliminar el jugador.";
            }
        }
        MostrarModalEliminar = false;
    }
}
